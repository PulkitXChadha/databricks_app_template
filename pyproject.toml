[project]
name = "databricks-app-template"
version = "0.1.0"
description = "Modern Databricks App Template - FastAPI backend with React TypeScript frontend"
authors = [
    {name = "Your Name", email = "your.email@databricks.com"},
]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "databricks-sdk==0.67.0",
    "pydantic>=2.5.0",
    "python-multipart>=0.0.6",
    "httpx>=0.25.0",
    "pandas>=2.1.0",
    "requests>=2.32.4",
    "rich>=14.0.0",
    "click>=8.1.0",
    "databricks-connect>=16.1.6", # Latest version compatible with Python 3.11
    "mlflow[databricks]>=3.1.1",
    "debugpy>=1.8.15",
    "python-dotenv>=1.1.1",
    "sqlalchemy>=2.0.0", # Lakebase ORM
    "psycopg[binary]>=3.1.0", # Postgres driver for Lakebase (version 3 for async support)
    "alembic>=1.13.0", # Database migrations
    "email-validator>=2.0.0", # Email validation for Pydantic
    "prometheus-client>=0.19.0", # Prometheus metrics
]
requires-python = ">=3.11"

[project.scripts]
aggregate-metrics = "scripts.aggregate_metrics:main"

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "ty>=0.0.1a14",  # Type checker for development only
    "watchdog>=3.0.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.5.0",  # Parallel test execution
    "pytest-timeout>=2.2.0",  # Prevent hanging tests
    "pytest-mock>=3.12.0",  # Cleaner mock syntax
    "pytest-cov>=4.1.0",  # Coverage measurement and reporting
    "httpx>=0.25.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["server", "scripts"]

[tool.ruff]
line-length = 100
indent-width = 2
# Assume Python 3.12.
target-version = "py312"
# Enable auto-fix
fix = true

# Exclude a variety of commonly ignored directories.
exclude = [
  "__pycache__",
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "client",
]

[tool.ruff.format]
quote-style = "single"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
# Enable Pyflakes `F`, pycodestyle "W" and `E`, "Q" quotes, "I" imports.
ignore = [
  "D105", # Missing docstring in magic method.
  "D106", # Missing docstring in a public nested class.
  "D107", # Missing docstring in __init__.
  "D203", # 1 blank line required before class docstring.
  "D204", # 1 blank line required after class docstring.
  "D213", # Multi-line docstring summary should start at the second line.
  "D401", # First line of docstring should be in imperative mood: "{first_line}"
  "D407", # Missing dashed underline after section.
]
select = ["E", "W", "F", "Q", "I", "D"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["D101", "D102", "D103", "D104"]
"__init__.py" = ["D104"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["classmethod", "pydantic.validator"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
# Run fast tests first, with parallel execution
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--color=yes",
    # Parallel execution (uncomment to enable by default)
    # "-n", "auto",
    # Default timeout can be enabled with: "--timeout=30"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "contract: marks tests as contract tests",
    "unit: marks tests as unit tests",
    "requires_server: tests that need a running server",
    "asyncio: marks tests as async",
    "manual: marks tests as manual tests (require human interaction)",
    "timeout: marks tests with timeout requirements",
]
# Async mode for pytest-asyncio
asyncio_mode = "auto"

[tool.coverage.run]
source = ["server/routers", "server/services"]
omit = ["*/tests/*", "*/__pycache__/*", "*/migrations/*"]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[dependency-groups]
dev = [
    "tomli>=2.2.1",
    "websockets>=15.0.1",
]
